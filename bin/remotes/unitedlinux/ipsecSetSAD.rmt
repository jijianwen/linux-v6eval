#!/usr/bin/perl
#
# The Initial Developer of the Original Code is International Business
# Machines Corporation.  Portions created by IBM Corporation are
# Copyright (C) 2003 International Business Machines Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
######################################################################
use V6evalRemote;

rOpen() || goto error;

# set default values

$rOpt_timeout=30 if !defined($rOpt_timeout);

# check parameters

if ($rOpt_src eq undef || $rOpt_dst eq undef || $rOpt_spi eq undef) {
	print STDERR "src,dst,spi is required\n";
	usage();
	goto error;
}
if ($rOpt_mode !~ /transport|tunnel/) {
	print STDERR "mode must be one of transport|tunnel\n";
	usage();
	goto error;
}
if ($rOpt_protocol !~ /ah|esp|ah-esp/) {
	print STDERR "protocol must be one of ah|esp|ah-esp\n";
	usage();
	goto error;
}
if ($rOpt_sbyte ne undef) {
	goto notsupported;
}
if ($rOpt_hbyte ne undef) {
	goto notsupported;
}

#----------------------------------------------------------------------

$option = "";

if ($rOpt_protocol eq "ah") {
#	$option .= "auth $rOpt_eauth 0s$rOpt_eauthkey ";
}
if ($rOpt_protocol eq "esp") {

	$rOpt_ealgo = "des3_ede" if($rOpt_ealgo eq "3des-cbc");
	$rOpt_ealgo = "aes" if($rOpt_ealgo eq "rijndael-cbc");
	$rOpt_ealgo = "rfc3686\\\(ctr\\\(aes\\\)\\\)" if($rOpt_ealgo eq "aes-ctr");
	$rOpt_ealgo = "cbc\\\(camellia\\\)" if($rOpt_ealgo eq "camellia-cbc");

        if ($rOpt_ealgo eq "null") {
	    $rOpt_ealgo = "cipher_null";
	    $rOpt_ealgokey = "\"\"";
	    $option .= " enc $rOpt_ealgo $rOpt_ealgokey";
        }
        else {
	    $rOpt_ealgokey = "0x".&strtohex($rOpt_ealgokey);
	    $option .= " enc $rOpt_ealgo $rOpt_ealgokey";
        }

	$rOpt_eauth =~ s/^hmac-//;
        $rOpt_eauth = "xcbc\\\(aes\\\)" if($rOpt_eauth eq "aes-xcbc-mac");

        if ($rOpt_eauth ne undef && $rOpt_eauthkey ne undef) {
	    if ($rOpt_eauth eq "null") {
		$rOpt_eauth = "digest_null";
                $rOpt_eauthkey = "\"\"";
                $option .= " auth $rOpt_eauth $rOpt_eauthkey";
	    }
	    else {
		$rOpt_eauthkey = "0x".&strtohex($rOpt_eauthkey);
		$option .= " auth $rOpt_eauth $rOpt_eauthkey";
	    }
	}

        if (defined($rOpt_unique)) {
	    $option .= " reqid $rOpt_unique";
        }

}
if ($rOpt_protocol eq "ah-esp") {
#        $option .= "auth $rOpt_eauth 0s$rOpt_eauthkey enc $rOpt_ealgo 0s$rOpt_ealgokey ";
}
$cmd = "";
if ($rOpt_mode =~ /transport/) {
$cmd = "/sbin/ip xfrm state add src $rOpt_src dst $rOpt_dst proto $rOpt_protocol spi $rOpt_spi $option mode $rOpt_mode sel src $rOpt_src dst $rOpt_dst";
} elsif ($rOpt_mode =~ /tunnel/) {
$cmd = "/sbin/ip xfrm state add src $rOpt_src dst $rOpt_dst proto $rOpt_protocol spi $rOpt_spi $option mode $rOpt_mode sel src $rOpt_nsrc dst $rOpt_ndst";
}



rLogin($rOpt_timeout) || goto error;
rCommand($cmd , $rOpt_timeout) || goto error;
rCommand("/sbin/ip xfrm state list" , $rOpt_timeout) || goto error;
rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
	rClose();
	exit($V6evalRemote::exitFail);

notsupported:
	rClose();
	exit($V6evalRemote::exitNS);

use constant ASCII => {
    '0' => 48,
    '1' => 49,
    '2' => 50,
    '3' => 51,
    '4' => 52,
    '5' => 53,
    '6' => 54,
    '7' => 55,
    '8' => 56,
    '9' => 57,
    'A' => 65,
    'B' => 66,
    'C' => 67,
    'D' => 68,
    'E' => 69,
    'F' => 70,
    'G' => 71,
    'H' => 72,
    'I' => 73,
    'J' => 74,
    'K' => 75,
    'L' => 76,
    'M' => 77,
    'N' => 78,
    'O' => 79,
    'P' => 80,
    'Q' => 81,
    'R' => 82,
    'S' => 83,
    'T' => 84,
    'U' => 85,
    'V' => 86,
    'W' => 87,
    'X' => 88,
    'Y' => 89,
    'Z' => 90,
    'a' => 97,
    'b' => 98,
    'c' => 99,
    'd' => 100,
    'e' => 101,
    'f' => 102,
    'g' => 103,
    'h' => 104,
    'i' => 105,
    'j' => 106,
    'k' => 107,
    'l' => 108,
    'm' => 109,
    'n' => 110,
    'o' => 111,
    'p' => 112,
    'q' => 113,
    'r' => 114,
    's' => 115,
    't' => 116,
    'u' => 117,
    'v' => 118,
    'w' => 119,
    'x' => 120,
    'y' => 121,
    'z' => 122,
};

sub strtohex {
    my ($str) = @_;
    my @tmp;
    my $hex;
    for ( my $i = ( length($str) - 1 ) ; $i >= 0 ; $i-- ) {
        push( @tmp, substr( $str, $i, 1 ) );
    }
    map( $_ = ASCII->{$_}, @tmp );
    map( $_ = sprintf( "%x", $_ ), @tmp );
    for ( my $i = 0 ; $i < length($str) ; $i++ ) {
        $hex .= pop(@tmp);
    }
    return $hex;
}

