#!/usr/bin/perl
#
# The Initial Developer of the Original Code is International Business
# Machines Corporation.  Portions created by IBM Corporation are
# Copyright (C) 2003 International Business Machines Corporation.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions and disclaimer are agreed and accepted by the user:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the names of the copyrighters, the name of the project which
# is related to this software (hereinafter referred to as "project") nor
# the names of the contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# 4. No merchantable use may be permitted without prior written
# notification to the copyrighters. However, using this software for the
# purpose of testing or evaluating any products including merchantable
# products may be permitted without any notification to the copyrighters.
#
#
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#
######################################################################
use V6evalRemote;

rOpen() || goto error;

# set default values

$rOpt_timeout = 30 if !defined($rOpt_timeout);

$rOpt_upperspec = "any"      if !defined($rOpt_upperspec);
$rOpt_policy    = "ipsec"    if !defined($rOpt_policy);
$rOpt_level     = "required" if !defined($rOpt_level);

#if (defined($rOpt_sport) && !defined($rOpt_dport)) {
#	$rOpt_sport = "[$rOpt_sport]";
#	$rOpt_dport = "[any]";
#}
#elsif (!defined($rOpt_sport) && defined($rOpt_dport)) {
#	$rOpt_sport = "[any]";
#	$rOpt_dport = "[$rOpt_dport]";
#}
#elsif (defined($rOpt_sport) && defined($rOpt_dport)) {
#	$rOpt_sport = "[$rOpt_sport]";
#	$rOpt_dport = "[$rOpt_dport]";
#}

# check parameters

if ( $rOpt_policy ne "nopolicy" ) {
    if ( !defined($rOpt_src) || !defined($rOpt_dst) ) {
        print STDERR "src,dst is required\n";
        usage();
        goto error;
    }
}

if ( $rOpt_policy !~ /ipsec|none|discard/ ) {
    print STDERR "policy must be one of ipsec|none|discard\n";
    usage();
    goto error;
}

if ( $rOpt_policy eq "ipsec" ) {
    if ( $rOpt_mode !~ /transport|tunnel/ ) {
        print STDERR "mode must be one of transport|tunnel\n";
        usage();
        goto error;
    }

    if ( $rOpt_protocol !~ /ah|esp|ah-esp|esp-auth/ ) {
        print STDERR "protocol must be one of ah|esp|ah-esp|esp-auth\n";
        usage();
        goto error;
    }

    if ( $rOpt_upperspec !~ /any|tcp|udp|icmpv6|icmp|135/ ) {
        print STDERR "upperspec must be one of any|tcp|udp|icmpv6|icmp|135\n";
        usage();
        goto error;
    }

    if ( $rOpt_direction !~ /in|out/ ) {
        print STDERR "direction must be one of in|out\n";
        usage();
        goto error;
    }

    if ( $rOpt_level !~ /use|require|unique/ ) {
        print STDERR "level must be one of use|require\n";
        usage();
        goto error;
    }

    if ( $rOpt_mode eq "transport" ) {
        if ( $rOpt_tsrc ne undef && $rOpt_tdst ne undef ) {
            print STDERR "tsrc,tdst is defined in transport mode\n";
            usage();
            goto error;
        }
    }

    if ( $rOpt_mode eq "tunnel" ) {
        if ( $rOpt_tsrc eq undef || $rOpt_tdst eq undef ) {
            print STDERR "tsrc,tdst is required in tunnel mode\n";
            usage();
            goto error;
        }
    }

    if ( ( $rOpt_level eq 'unique' ) && ( !defined($rOpt_unique) ) ) {
        $rOpt_level = "required";
        print STDERR "unique ID is required.\n";
        usage();
        goto error;
    }
}

#----------------------------------------------------------------------

$upspec = "";
$option = "";

if ( $rOpt_policy eq "discard" ) {
    if ( $rOpt_src eq "any" ) {
        $rOpt_src = "::/0";
    }
    if ( $rOpt_dst eq "any" ) {
        $rOpt_dst = "::/0";
    }
}

if ( $rOpt_upperspec eq "icmp6" ) {
    $upspec .= "proto ipv6-icmp ";
    if ( defined($rOpt_icmp6_type) ) {
        $upspec .= "type $rOpt_icmp6_type ";
        if ( defined($rOpt_icmp6_code) ) {
            $upspec .= "code $rOpt_icmp6_code";
        }
        else {
            $upspec .= "code 0";
        }
    }
}

#if ($rOpt_policy ne "nopolicy") {

#}

#if ( $rOpt_policy eq "ipsec" ) {
#    if ( $rOpt_mode eq 'transport' ) {
#
#    }
#    if ( $rOpt_mode eq 'tunnel' ) {

#    }

if ( $rOpt_protocol eq "ah" ) {
    if ( defined($rOpt_unique) && ( $rOpt_level eq 'unique' ) ) {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto ah";
        }
        else {
            $option .= "proto ah";
        }
    }
    else {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto ah";
        }
        else {
            $option .= "proto ah";
        }
    }
}
if ( $rOpt_protocol eq "esp" ) {
    if ( defined($rOpt_unique) && ( $rOpt_level eq 'unique' ) ) {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto esp";
        }
        else {
            $option .= "proto esp";
        }
    }
    else {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto esp";
        }
        else {
            $option .= "proto esp";
        }
    }
}
if ( $rOpt_protocol eq "esp-auth" ) {
    if ( defined($rOpt_unique) && ( $rOpt_level eq 'unique' ) ) {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto esp";
        }
        else {
            $option .= "proto esp";
        }
    }
    else {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto esp";
        }
        else {
            $option .= "proto esp";
        }
    }
}
if ( $rOpt_protocol eq "ah-esp" ) {
    if ( defined($rOpt_unique) && ( $rOpt_level eq 'unique' ) ) {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto ah";
        }
        else {
            $option .= "proto ah";
        }
    }
    else {
        if ( defined($rOpt_ommit) && ( $rOpt_mode eq 'transport' ) ) {
            $option .= "proto ah";
        }
        else {
            $option .= "proto ah";
        }
    }
}

#}

#if ($rOpt_policy eq "none") {
#
#}
$action = "allow";
if ( $rOpt_policy eq "discard" ) {
    $action = "block";
}

#unless(defined($rOpt_nodump)) {
#
#}

$cmd = "";
if ( $rOpt_mode eq 'transport' ) {

#    if ( $rOpt_direction =~ /in/ ) {
#        $cmd =
#"ip xfrm policy add dir $rOpt_direction src $rOpt_src dst $rOpt_dst $upspec tmpl src $rOpt_src dst $rOpt_dst $option mode $rOpt_mode; ip xfrm policy add dir fwd src $rOpt_src dst $rOpt_dst $upspec tmpl src $rOpt_src dst $rOpt_dst $option mode $rOpt_mode";
#    }
#    else {
    $cmd =
"ip xfrm policy add dir $rOpt_direction src $rOpt_src dst $rOpt_dst $upspec tmpl src $rOpt_src dst $rOpt_dst $option mode $rOpt_mode ";

    #    }
}
if ( $rOpt_mode eq 'tunnel' ) {

#    if ( $rOpt_direction =~ /in/ ) {
#        $cmd =
#"ip xfrm policy add dir $rOpt_direction src $rOpt_src dst $rOpt_dst $upspec tmpl src $rOpt_tsrc dst $rOpt_tdst $option mode $rOpt_mode; ip xfrm policy add dir fwd src $rOpt_src dst $rOpt_dst $upspec tmpl src $rOpt_tsrc dst $rOpt_tdst $option mode $rOpt_mode ";
#    }
#    else {
    $cmd =
"ip xfrm policy add dir $rOpt_direction src $rOpt_src dst $rOpt_dst $upspec tmpl src $rOpt_tsrc dst $rOpt_tdst $option mode $rOpt_mode ";

    #    }
}

#$cmd = "ip xfrm policy add dir $rOpt_direction src $rOpt_src dst $rOpt_dst $upspec tmpl src $rOpt_src dst $rOpt_dst $option mode $rOpt_mode ";
$cmd .= "reqid $rOpt_unique " if ( defined($rOpt_unique) );

$cmd .= "action $action ";

#comment this because require is default for level
#$cmd .= "level $rOpt_level " if(defined($rOpt_level));

rLogin($rOpt_timeout) || goto error;
rCommand( $cmd,                  $rOpt_timeout ) || goto error;
rCommand( "ip xfrm policy list", $rOpt_timeout ) || goto error;
rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
rClose();
exit($V6evalRemote::exitFail);

########################################################################
sub usage() {
    print STDERR "ipsecSetSPD.rmt [parameters]\n";
    print STDERR "parameters:\n";
    print STDERR "src=source address\n";
    print STDERR "dst=destination address\n";
    print STDERR "sport=source port (default:any)\n";
    print STDERR "dport=destination port (default:any)\n";
    print STDERR "upperspec={any|tcp|udp|ipv6-icmp|icmp|135} (default:any)\n";
    print STDERR "direction={in|out}\n";
    print STDERR "protocol={ah|esp|ah-esp|esp-auth}\n";
    print STDERR "mode={transport|tunnel}\n";
    print STDERR "policy={ipsec|none|discard} (default:ipsec)\n";
    print STDERR "tsrc=tunnel entry address\n";
    print STDERR "tdst=tunnel exit address\n";
    print STDERR "unique=unique ID for MIPv6 configuration\n";
}

########################################################################
